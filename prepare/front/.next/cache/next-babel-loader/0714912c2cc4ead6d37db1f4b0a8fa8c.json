{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(logIn),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(logOut),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchUser);\n\nimport { takeLatest, fork, put, delay, call, take, takeEvery } from \"redux-saga/effects\";\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE } from \"../reducers/user\"; // api\n\nfunction logInAPI(data) {\n  return axios.post(\"/api/login\", data);\n}\n\nfunction logOutAPI() {\n  return axios.post(\"/api/logout\");\n}\n\nfunction signUpAPI() {\n  return axios.post(\"/api/signUp\");\n}\n\nfunction followAPI() {\n  return axios.post(\"/api/follow\");\n} // saga\n\n\nfunction logIn(action) {\n  return _regeneratorRuntime.wrap(function logIn$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          console.log(\"saga logIn\"); // const result = yield call(logInAPI);\n\n          _context.next = 4;\n          return delay(1000);\n\n        case 4:\n          _context.next = 6;\n          return put({\n            type: LOG_IN_SUCCESS,\n            data: action.data\n          });\n\n        case 6:\n          _context.next = 13;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 13;\n          return put({\n            type: LOG_IN_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction logOut() {\n  return _regeneratorRuntime.wrap(function logOut$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            type: LOG_OUT_SUCCESS\n          });\n\n        case 5:\n          _context2.next = 12;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.error(_context2.t0);\n          _context2.next = 12;\n          return put({\n            type: LOG_OUT_FAILURE,\n            error: _context2.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 7]]);\n} // watcher\n\n\nexport function watchUser() {\n  return _regeneratorRuntime.wrap(function watchUser$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeLatest(LOG_IN_REQUEST, logIn);\n\n        case 2:\n          _context3.next = 4;\n          return takeLatest(LOG_OUT_REQUEST, logOut);\n\n        case 4:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["/Users/jinho/JS/NodeBird/prepare/front/sagas/user.js"],"names":["logIn","logOut","watchUser","takeLatest","fork","put","delay","call","take","takeEvery","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","logInAPI","data","axios","post","logOutAPI","signUpAPI","followAPI","action","console","log","type","error","response"],"mappings":";;oDAqCUA,K;qDAkBAC,M;qDAkBOC,S;;AAzEjB,SACIC,UADJ,EAEIC,IAFJ,EAGIC,GAHJ,EAIIC,KAJJ,EAKIC,IALJ,EAMIC,IANJ,EAOIC,SAPJ,QAQO,oBARP;AASA,SACIC,cADJ,EAEIC,cAFJ,EAGIC,cAHJ,EAIIC,eAJJ,EAKIC,eALJ,EAMIC,eANJ,QAOO,kBAPP,C,CAQA;;AAEA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACpB,SAAOC,KAAK,CAACC,IAAN,CAAW,YAAX,EAAyBF,IAAzB,CAAP;AACH;;AAED,SAASG,SAAT,GAAqB;AACjB,SAAOF,KAAK,CAACC,IAAN,CAAW,aAAX,CAAP;AACH;;AAED,SAASE,SAAT,GAAqB;AACjB,SAAOH,KAAK,CAACC,IAAN,CAAW,aAAX,CAAP;AACH;;AAED,SAASG,SAAT,GAAqB;AACjB,SAAOJ,KAAK,CAACC,IAAN,CAAW,aAAX,CAAP;AACH,C,CAED;;;AAEA,SAAUnB,KAAV,CAAgBuB,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQC,UAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAFR,CAGQ;;AAHR;AAIQ,iBAAMnB,KAAK,CAAC,IAAD,CAAX;;AAJR;AAAA;AAKQ,iBAAMD,GAAG,CAAC;AACNqB,YAAAA,IAAI,EAAEf,cADA;AAENM,YAAAA,IAAI,EAAEM,MAAM,CAACN;AAFP,WAAD,CAAT;;AALR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAUQO,UAAAA,OAAO,CAACG,KAAR;AAVR;AAWQ,iBAAMtB,GAAG,CAAC;AACNqB,YAAAA,IAAI,EAAEd,cADA;AAENe,YAAAA,KAAK,EAAE,YAAIC,QAAJ,CAAaX;AAFd,WAAD,CAAT;;AAXR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAkBA,SAAUhB,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGQ,iBAAMK,KAAK,CAAC,IAAD,CAAX;;AAHR;AAAA;AAIQ,iBAAMD,GAAG,CAAC;AACNqB,YAAAA,IAAI,EAAEZ;AADA,WAAD,CAAT;;AAJR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAQQU,UAAAA,OAAO,CAACG,KAAR;AARR;AASQ,iBAAMtB,GAAG,CAAC;AACNqB,YAAAA,IAAI,EAAEX,eADA;AAENY,YAAAA,KAAK,EAAE,aAAIC,QAAJ,CAAaX;AAFd,WAAD,CAAT;;AATR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAgBA;;;AAEA,OAAO,SAAUf,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACH,iBAAMC,UAAU,CAACO,cAAD,EAAiBV,KAAjB,CAAhB;;AADG;AAAA;AAEH,iBAAMG,UAAU,CAACU,eAAD,EAAkBZ,MAAlB,CAAhB;;AAFG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {\n    takeLatest,\n    fork,\n    put,\n    delay,\n    call,\n    take,\n    takeEvery,\n} from \"redux-saga/effects\";\nimport {\n    LOG_IN_REQUEST,\n    LOG_IN_SUCCESS,\n    LOG_IN_FAILURE,\n    LOG_OUT_REQUEST,\n    LOG_OUT_SUCCESS,\n    LOG_OUT_FAILURE,\n} from \"../reducers/user\";\n// api\n\nfunction logInAPI(data) {\n    return axios.post(\"/api/login\", data);\n}\n\nfunction logOutAPI() {\n    return axios.post(\"/api/logout\");\n}\n\nfunction signUpAPI() {\n    return axios.post(\"/api/signUp\");\n}\n\nfunction followAPI() {\n    return axios.post(\"/api/follow\");\n}\n\n// saga\n\nfunction* logIn(action) {\n    try {\n        console.log(\"saga logIn\");\n        // const result = yield call(logInAPI);\n        yield delay(1000);\n        yield put({\n            type: LOG_IN_SUCCESS,\n            data: action.data,\n        });\n    } catch (err) {\n        console.error(err);\n        yield put({\n            type: LOG_IN_FAILURE,\n            error: err.response.data,\n        });\n    }\n}\n\nfunction* logOut() {\n    try {\n        // const result = yield call(logOutAPI);\n        yield delay(1000);\n        yield put({\n            type: LOG_OUT_SUCCESS,\n        });\n    } catch (err) {\n        console.error(err);\n        yield put({\n            type: LOG_OUT_FAILURE,\n            error: err.response.data,\n        });\n    }\n}\n\n// watcher\n\nexport function* watchUser() {\n    yield takeLatest(LOG_IN_REQUEST, logIn);\n    yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n"]},"metadata":{},"sourceType":"module"}