{"ast":null,"code":"import { takeLatest, fork, put, delay, call, take, takeEvery } from \"redux-saga/effects\";\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE } from \"../reducers/user\"; // api\n\nfunction logInAPI(data) {\n  return axios.post(\"/api/login\", data);\n}\n\nfunction logOutAPI() {\n  return axios.post(\"/api/logout\");\n}\n\nfunction signUpAPI() {\n  return axios.post(\"/api/signUp\");\n}\n\nfunction followAPI() {\n  return axios.post(\"/api/follow\");\n} // saga\n\n\nfunction* logIn(action) {\n  try {\n    console.log(\"saga logIn\"); // const result = yield call(logInAPI);\n\n    yield delay(1000);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* logOut() {\n  try {\n    // const result = yield call(logOutAPI);\n    yield delay(1000);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n} // watcher\n\n\nexport function* watchUser() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}","map":{"version":3,"sources":["/Users/jinho/JS/NodeBird/prepare/front/sagas/user.js"],"names":["takeLatest","fork","put","delay","call","take","takeEvery","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","logInAPI","data","axios","post","logOutAPI","signUpAPI","followAPI","logIn","action","console","log","type","err","error","response","logOut","watchUser"],"mappings":"AAAA,SACIA,UADJ,EAEIC,IAFJ,EAGIC,GAHJ,EAIIC,KAJJ,EAKIC,IALJ,EAMIC,IANJ,EAOIC,SAPJ,QAQO,oBARP;AASA,SACIC,cADJ,EAEIC,cAFJ,EAGIC,cAHJ,EAIIC,eAJJ,EAKIC,eALJ,EAMIC,eANJ,QAOO,kBAPP,C,CAQA;;AAEA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACpB,SAAOC,KAAK,CAACC,IAAN,CAAW,YAAX,EAAyBF,IAAzB,CAAP;AACH;;AAED,SAASG,SAAT,GAAqB;AACjB,SAAOF,KAAK,CAACC,IAAN,CAAW,aAAX,CAAP;AACH;;AAED,SAASE,SAAT,GAAqB;AACjB,SAAOH,KAAK,CAACC,IAAN,CAAW,aAAX,CAAP;AACH;;AAED,SAASG,SAAT,GAAqB;AACjB,SAAOJ,KAAK,CAACC,IAAN,CAAW,aAAX,CAAP;AACH,C,CAED;;;AAEA,UAAUI,KAAV,CAAgBC,MAAhB,EAAwB;AACpB,MAAI;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EADA,CAEA;;AACA,UAAMpB,KAAK,CAAC,IAAD,CAAX;AACA,UAAMD,GAAG,CAAC;AACNsB,MAAAA,IAAI,EAAEhB,cADA;AAENM,MAAAA,IAAI,EAAEO,MAAM,CAACP;AAFP,KAAD,CAAT;AAIH,GARD,CAQE,OAAOW,GAAP,EAAY;AACVH,IAAAA,OAAO,CAACI,KAAR,CAAcD,GAAd;AACA,UAAMvB,GAAG,CAAC;AACNsB,MAAAA,IAAI,EAAEf,cADA;AAENiB,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAab;AAFd,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUc,MAAV,GAAmB;AACf,MAAI;AACA;AACA,UAAMzB,KAAK,CAAC,IAAD,CAAX;AACA,UAAMD,GAAG,CAAC;AACNsB,MAAAA,IAAI,EAAEb;AADA,KAAD,CAAT;AAGH,GAND,CAME,OAAOc,GAAP,EAAY;AACVH,IAAAA,OAAO,CAACI,KAAR,CAAcD,GAAd;AACA,UAAMvB,GAAG,CAAC;AACNsB,MAAAA,IAAI,EAAEZ,eADA;AAENc,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAab;AAFd,KAAD,CAAT;AAIH;AACJ,C,CAED;;;AAEA,OAAO,UAAUe,SAAV,GAAsB;AACzB,QAAM7B,UAAU,CAACO,cAAD,EAAiBa,KAAjB,CAAhB;AACA,QAAMpB,UAAU,CAACU,eAAD,EAAkBkB,MAAlB,CAAhB;AACH","sourcesContent":["import {\n    takeLatest,\n    fork,\n    put,\n    delay,\n    call,\n    take,\n    takeEvery,\n} from \"redux-saga/effects\";\nimport {\n    LOG_IN_REQUEST,\n    LOG_IN_SUCCESS,\n    LOG_IN_FAILURE,\n    LOG_OUT_REQUEST,\n    LOG_OUT_SUCCESS,\n    LOG_OUT_FAILURE,\n} from \"../reducers/user\";\n// api\n\nfunction logInAPI(data) {\n    return axios.post(\"/api/login\", data);\n}\n\nfunction logOutAPI() {\n    return axios.post(\"/api/logout\");\n}\n\nfunction signUpAPI() {\n    return axios.post(\"/api/signUp\");\n}\n\nfunction followAPI() {\n    return axios.post(\"/api/follow\");\n}\n\n// saga\n\nfunction* logIn(action) {\n    try {\n        console.log(\"saga logIn\");\n        // const result = yield call(logInAPI);\n        yield delay(1000);\n        yield put({\n            type: LOG_IN_SUCCESS,\n            data: action.data,\n        });\n    } catch (err) {\n        console.error(err);\n        yield put({\n            type: LOG_IN_FAILURE,\n            error: err.response.data,\n        });\n    }\n}\n\nfunction* logOut() {\n    try {\n        // const result = yield call(logOutAPI);\n        yield delay(1000);\n        yield put({\n            type: LOG_OUT_SUCCESS,\n        });\n    } catch (err) {\n        console.error(err);\n        yield put({\n            type: LOG_OUT_FAILURE,\n            error: err.response.data,\n        });\n    }\n}\n\n// watcher\n\nexport function* watchUser() {\n    yield takeLatest(LOG_IN_REQUEST, logIn);\n    yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n"]},"metadata":{},"sourceType":"module"}