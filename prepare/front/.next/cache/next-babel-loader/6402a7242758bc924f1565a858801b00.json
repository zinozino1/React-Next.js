{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchPost);\n\nimport { takeLatest, call, put, delay } from \"redux-saga/effects\";\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE } from \"../reducers/post\"; // saga\n\nfunction addPost(action) {\n  var id;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          id = shortId.generate();\n          _context.next = 6;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: {\n              id: id,\n              content: action.data\n            }\n          });\n\n        case 6:\n          _context.next = 8;\n          return put({\n            type: ADD_POST_TO_ME,\n            data: id\n          });\n\n        case 8:\n          _context.next = 15;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 15;\n          return put({\n            type: ADD_POST_FAILURE,\n            data: _context.t0.response.data\n          });\n\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 10]]);\n} // watcher\n\n\nexport function watchPost() {\n  return _regeneratorRuntime.wrap(function watchPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["/Users/jinho/JS/NodeBird/prepare/front/sagas/post.js"],"names":["addPost","watchPost","takeLatest","call","put","delay","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","action","id","shortId","generate","type","data","content","ADD_POST_TO_ME","console","error","response"],"mappings":";;oDASUA,O;qDA2BOC,S;;AApCjB,SAASC,UAAT,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,KAAhC,QAA6C,oBAA7C;AACA,SACIC,gBADJ,EAEIC,gBAFJ,EAGIC,gBAHJ,QAIO,kBAJP,C,CAMA;;AAEA,SAAUR,OAAV,CAAkBS,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGQ,iBAAMJ,KAAK,CAAC,IAAD,CAAX;;AAHR;AAIcK,UAAAA,EAJd,GAImBC,OAAO,CAACC,QAAR,EAJnB;AAAA;AAKQ,iBAAMR,GAAG,CAAC;AACNS,YAAAA,IAAI,EAAEN,gBADA;AAENO,YAAAA,IAAI,EAAE;AACFJ,cAAAA,EAAE,EAAFA,EADE;AAEFK,cAAAA,OAAO,EAAEN,MAAM,CAACK;AAFd;AAFA,WAAD,CAAT;;AALR;AAAA;AAYQ,iBAAMV,GAAG,CAAC;AACNS,YAAAA,IAAI,EAAEG,cADA;AAENF,YAAAA,IAAI,EAAEJ;AAFA,WAAD,CAAT;;AAZR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAiBQO,UAAAA,OAAO,CAACC,KAAR;AAjBR;AAkBQ,iBAAMd,GAAG,CAAC;AACNS,YAAAA,IAAI,EAAEL,gBADA;AAENM,YAAAA,IAAI,EAAE,YAAIK,QAAJ,CAAaL;AAFb,WAAD,CAAT;;AAlBR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAyBA;;;AAEA,OAAO,SAAUb,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACH,iBAAMC,UAAU,CAACI,gBAAD,EAAmBN,OAAnB,CAAhB;;AADG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { takeLatest, call, put, delay } from \"redux-saga/effects\";\nimport {\n    ADD_POST_REQUEST,\n    ADD_POST_SUCCESS,\n    ADD_POST_FAILURE,\n} from \"../reducers/post\";\n\n// saga\n\nfunction* addPost(action) {\n    try {\n        // const result = yield call(addPostAPI, action.data);\n        yield delay(1000);\n        const id = shortId.generate();\n        yield put({\n            type: ADD_POST_SUCCESS,\n            data: {\n                id,\n                content: action.data,\n            },\n        });\n        yield put({\n            type: ADD_POST_TO_ME,\n            data: id,\n        });\n    } catch (err) {\n        console.error(err);\n        yield put({\n            type: ADD_POST_FAILURE,\n            data: err.response.data,\n        });\n    }\n}\n\n// watcher\n\nexport function* watchPost() {\n    yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n"]},"metadata":{},"sourceType":"module"}