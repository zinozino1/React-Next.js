{"ast":null,"code":"import { HYDRATE } from \"next-redux-wrapper\";\nimport { combineReducers } from \"redux\";\nimport user from \"./user\";\nimport post from \"./post\";\nvar initialState = {\n  user: {},\n  post: {}\n}; // const rootReducer = (state = initialState, action) => {\n//     switch (action.type) {\n//         case HYDRATE:\n//             console.log(\"HYDRATE\", action);\n//             return action.payload;\n//         default: {\n//             const combinedReducer = combineReducers({\n//                 user,\n//                 post,\n//             });\n//             return combinedReducer(state, action);\n//         }\n//     }\n// };\n\nvar rootReducer = combineReducers({\n  index: function index() {\n    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var action = arguments.length > 1 ? arguments[1] : undefined;\n\n    switch (action.type) {\n      case HYDRATE:\n        console.log(\"HYDRATE\", action);\n        return action.payload;\n\n      default:\n        return state;\n    }\n  },\n  user: user,\n  post: post\n});\nexport default rootReducer;","map":{"version":3,"sources":["/Users/jinho/JS/NodeBird/prepare/front/reducers/index.js"],"names":["HYDRATE","combineReducers","user","post","initialState","rootReducer","index","state","action","type","console","log","payload"],"mappings":"AAAA,SAASA,OAAT,QAAwB,oBAAxB;AACA,SAASC,eAAT,QAAgC,OAAhC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AAEA,IAAMC,YAAY,GAAG;AACjBF,EAAAA,IAAI,EAAE,EADW;AAEjBC,EAAAA,IAAI,EAAE;AAFW,CAArB,C,CAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAME,WAAW,GAAGJ,eAAe,CAAC;AAChCK,EAAAA,KAAK,EAAE,iBAAwB;AAAA,QAAvBC,KAAuB,uEAAf,EAAe;AAAA,QAAXC,MAAW;;AAC3B,YAAQA,MAAM,CAACC,IAAf;AACI,WAAKT,OAAL;AACIU,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBH,MAAvB;AACA,eAAOA,MAAM,CAACI,OAAd;;AACJ;AACI,eAAOL,KAAP;AALR;AAOH,GAT+B;AAUhCL,EAAAA,IAAI,EAAJA,IAVgC;AAWhCC,EAAAA,IAAI,EAAJA;AAXgC,CAAD,CAAnC;AAcA,eAAeE,WAAf","sourcesContent":["import { HYDRATE } from \"next-redux-wrapper\";\nimport { combineReducers } from \"redux\";\nimport user from \"./user\";\nimport post from \"./post\";\n\nconst initialState = {\n    user: {},\n    post: {},\n};\n\n// const rootReducer = (state = initialState, action) => {\n//     switch (action.type) {\n//         case HYDRATE:\n//             console.log(\"HYDRATE\", action);\n//             return action.payload;\n//         default: {\n//             const combinedReducer = combineReducers({\n//                 user,\n//                 post,\n//             });\n//             return combinedReducer(state, action);\n//         }\n//     }\n// };\n\nconst rootReducer = combineReducers({\n    index: (state = {}, action) => {\n        switch (action.type) {\n            case HYDRATE:\n                console.log(\"HYDRATE\", action);\n                return action.payload;\n            default:\n                return state;\n        }\n    },\n    user,\n    post,\n});\n\nexport default rootReducer;\n"]},"metadata":{},"sourceType":"module"}