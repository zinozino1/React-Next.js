{"ast":null,"code":"import { createWrapper } from \"next-redux-wrapper\";\nimport { createStore, compose, applyMiddleware } from \"redux\";\nimport rootReducer from \"../reducers\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { createSagaMiddleware } from \"redux-saga\";\nimport rootSaga from \"../sagas\";\n\nconst configureStore = () => {\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = [sagaMiddleware];\n  const enhancer = false ? compose(applyMiddleware(...middlewares)) : composeWithDevTools(applyMiddleware(...middlewares));\n  const store = createStore(rootReducer, enhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nconst wrapper = createWrapper(configureStore, {\n  debug: true\n});\nexport default wrapper;","map":{"version":3,"sources":["/Users/jinho/JS/NodeBird/prepare/front/store/configureStore.js"],"names":["createWrapper","createStore","compose","applyMiddleware","rootReducer","composeWithDevTools","createSagaMiddleware","rootSaga","configureStore","sagaMiddleware","middlewares","enhancer","store","sagaTask","run","wrapper","debug"],"mappings":"AAAA,SAASA,aAAT,QAA8B,oBAA9B;AACA,SAASC,WAAT,EAAsBC,OAAtB,EAA+BC,eAA/B,QAAsD,OAAtD;AACA,OAAOC,WAAP,MAAwB,aAAxB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,oBAAT,QAAqC,YAArC;AACA,OAAOC,QAAP,MAAqB,UAArB;;AAEA,MAAMC,cAAc,GAAG,MAAM;AACzB,QAAMC,cAAc,GAAGH,oBAAoB,EAA3C;AACA,QAAMI,WAAW,GAAG,CAACD,cAAD,CAApB;AACA,QAAME,QAAQ,GACV,QACMT,OAAO,CAACC,eAAe,CAAC,GAAGO,WAAJ,CAAhB,CADb,GAEML,mBAAmB,CAACF,eAAe,CAAC,GAAGO,WAAJ,CAAhB,CAH7B;AAIA,QAAME,KAAK,GAAGX,WAAW,CAACG,WAAD,EAAcO,QAAd,CAAzB;AACAC,EAAAA,KAAK,CAACC,QAAN,GAAiBJ,cAAc,CAACK,GAAf,CAAmBP,QAAnB,CAAjB;AACA,SAAOK,KAAP;AACH,CAVD;;AAYA,MAAMG,OAAO,GAAGf,aAAa,CAACQ,cAAD,EAAiB;AAC1CQ,EAAAA,KAAK;AADqC,CAAjB,CAA7B;AAIA,eAAeD,OAAf","sourcesContent":["import { createWrapper } from \"next-redux-wrapper\";\nimport { createStore, compose, applyMiddleware } from \"redux\";\nimport rootReducer from \"../reducers\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { createSagaMiddleware } from \"redux-saga\";\nimport rootSaga from \"../sagas\";\n\nconst configureStore = () => {\n    const sagaMiddleware = createSagaMiddleware();\n    const middlewares = [sagaMiddleware];\n    const enhancer =\n        process.env.NODE_ENV === \"production\"\n            ? compose(applyMiddleware(...middlewares))\n            : composeWithDevTools(applyMiddleware(...middlewares));\n    const store = createStore(rootReducer, enhancer);\n    store.sagaTask = sagaMiddleware.run(rootSaga);\n    return store;\n};\n\nconst wrapper = createWrapper(configureStore, {\n    debug: process.env.NODE_ENV === \"development\",\n});\n\nexport default wrapper;\n"]},"metadata":{},"sourceType":"module"}